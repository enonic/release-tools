plugins {
    id 'signing'
    id 'maven-publish'
    id 'de.undercouch.download' version '5.3.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

ext {
    downloadArtifactsDir = "$buildDir/artifacts"
    sourceGroupId = 'com.enonic.xp'
    sourceGroupIdAsPath = sourceGroupId.replaceAll( '\\.', '/' )
    sourceVersion = project.findProperty( 'sourceVersion' )
    nexusUsername = project.findProperty( 'nexusUsername' )
    nexusUserPassword = project.findProperty( 'nexusUserPassword' )
    artifactIds = ['admin-api',
                   'core-api',
                   'jaxrs-api',
                   'portal-api',
                   'script-api',
                   'web-api',
                   'lib-admin',
                   'lib-app',
                   'lib-auditlog',
                   'lib-auth',
                   'lib-cluster',
                   'lib-common',
                   'lib-content',
                   'lib-context',
                   'lib-event',
                   'lib-export',
                   'lib-grid',
                   'lib-i18n',
                   'lib-io',
                   'lib-mail',
                   'lib-node',
                   'lib-portal',
                   'lib-project',
                   'lib-repo',
                   'lib-scheduler',
                   'lib-schema',
                   'lib-task',
                   'lib-value',
                   'lib-vhost',
                   'lib-websocket',
    ]
}

private String generateResourceUrl( sourceArtifactId, suffix )
{
    return "https://repo.enonic.com/public/$sourceGroupIdAsPath/$sourceArtifactId/$sourceVersion/$sourceArtifactId-$sourceVersion$suffix"
}

private String[] getArtifactsUrls()
{
    def result = []
    artifactIds.each { artifactId ->
        result.addAll( [
            generateResourceUrl( artifactId, '.jar' ),
            generateResourceUrl( artifactId, '.module' ),
            generateResourceUrl( artifactId, '.pom' ),
            generateResourceUrl( artifactId, '-javadoc.jar' ),
            generateResourceUrl( artifactId, '-sources.jar' ),
        ] )
    }
    return result
}

task downloadArtifacts( type: Download ) {
    description = 'Download artifacts from https://repo.enonic.com/public'
    src( getArtifactsUrls() )
    dest "$downloadArtifactsDir"
    doFirst {
        mkdir downloadArtifactsDir
    }
}

publishing {
    publications {
        artifactIds.each { sourceArtifactId ->
            "mavenxp${sourceArtifactId.replace( '-', '' )}"( MavenPublication ) {
                groupId = "$sourceGroupId"
                artifactId = "$sourceArtifactId"
                version = "$sourceVersion"

                artifact source: "$downloadArtifactsDir/$sourceArtifactId-${sourceVersion}.jar"
                artifact source: "$downloadArtifactsDir/$sourceArtifactId-${sourceVersion}-javadoc.jar", classifier: 'javadoc'
                artifact source: "$downloadArtifactsDir/$sourceArtifactId-${sourceVersion}-sources.jar", classifier: 'sources'
                artifact source: "$downloadArtifactsDir/$sourceArtifactId-${sourceVersion}.module"

                pom.withXml { xmlProvider ->
                    def builder = xmlProvider.asString()
                    builder.length = 0
                    builder.append( file( "$downloadArtifactsDir/$sourceArtifactId-${sourceVersion}.pom" ).text )
                }
            }
        }
    }
}

signing {
    artifactIds.each { sourceArtifactId ->
        sign publishing.publications."mavenxp${sourceArtifactId.replace( '-', '' )}"
    }
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = "35ebd1456ce050"
            username = "${nexusUsername}"
            password = "${nexusUserPassword}"
        }
    }
}
