name: build-and-push
description: This is an action to automate Gradle build and push tasks

inputs:
  repoUser:
    description: 'When publishing which user to use.'
    required: true
  repoPassword:
    description: 'When publishing which password to use.'
    required: true
  publishTask:
    description: 'Gradle task when publishing is needed'
    default: 'publish'
    required: false
  buildTask:
    description: 'Gradle task when only build is needed'
    default: 'build'
    required: false
  publishRelease:
    description: 'Should release be published'
    default: 'true'
    required: false
  skipPublishing:
    description: 'Should publishing be fully skipped regardless of any other conditions'
    default: ''
    required: false

outputs:
  release:
    description: "If this build should be released"
    value: ${{ steps.publish_vars.outputs.release == 'true' && github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Get publishing variables
      id: publish_vars
      uses: enonic/release-tools/publish-vars@master
      env:
        PROPERTIES_PATH: './gradle.properties'
        GITHUB_REPO_PRIVATE: ${{ github.event.repository.private }}


    - id: task_generator
      run: |
        if [[ "${{ inputs.skipPublishing }}" == 'true' || "${{ steps.publish_vars.outputs.repo }}" == '' ]] ||
           [[ "${{ inputs.publishRelease }}" != 'true' && "${{ steps.publish_vars.outputs.release }}" == 'true' ]] ||
           [[ "${{ inputs.skipPublishing }}" == '' && "${{ github.ref }}" != 'refs/heads/master' && "${{ github.ref }}" != 'refs/heads/main' ]]
        then
          echo "task=${{ inputs.buildTask }}" >> $GITHUB_OUTPUT
        else
          echo "task=${{ inputs.publishTask }}" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - uses: actions/setup-java@v3
      with:
         distribution: 'temurin'
         java-version: '11'
         cache: 'gradle'

    - run: ./gradlew ${{ steps.task_generator.outputs.task }} -Pcom.enonic.xp.app.production=true -PrepoKey=${{ steps.publish_vars.outputs.repo }} -PrepoUser=${{ inputs.repoUser }} -PrepoPassword=${{ inputs.repoPassword }} -PenonicRepoUsername=${{ inputs.repoUser }} -PenonicRepoPassword=${{ inputs.repoPassword }}
      shell: bash

    - uses: codecov/codecov-action@v3
