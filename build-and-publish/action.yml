name: build-and-push
description: This is an action to automate Gradle build and push tasks

inputs:
  repoUser:
    description: 'When publishing which user to use.'
    required: true
  repoPassword:
    description: 'When publishing which password to use.'
    required: true
  publishTask:
    description: 'Gradle task when publishing is needed'
    default: 'build publish'
    required: false
  buildTask:
    description: 'Gradle task when only build is needed'
    default: 'build'
    required: false
  publishRelease:
    description: 'Should release be published'
    default: 'true'
    required: false
  skipPublishing:
    description: 'Should publishing be fully skipped regardless of any other conditions'
    default: ''
    required: false
  dockerhubUsername:
    description: 'Dockerhub username'
    required: false
  dockerhubToken:
    description: 'Dockerhub token'
    required: false
  codecovToken:
    description: 'Codecov token'
    required: false
    
outputs:
  release:
    description: "If this build should be released"
    value: ${{ steps.publish_vars.outputs.release == 'true' && github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Get publishing variables
      id: publish_vars
      uses: enonic/release-tools/publish-vars@master
      env:
        PROPERTIES_PATH: './gradle.properties'
        GITHUB_REPO_PRIVATE: ${{ github.event.repository.private }}


    - id: task_generator
      run: |
        if [ ${{ inputs.skipPublishing == 'true' || steps.publish_vars.outputs.repo == '' }} = true ] ||
           [ ${{ inputs.publishRelease != 'true' && steps.publish_vars.outputs.release == 'true' }} = true ] ||
           [ ${{ inputs.skipPublishing == '' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' }} = true ]
        then
          echo "task=${{ inputs.buildTask }}" >> $GITHUB_OUTPUT
        else
          echo "task=${{ inputs.publishTask }}" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 11

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - run: ./gradlew ${{ steps.task_generator.outputs.task }} -Pcom.enonic.xp.app.production=true -PrepoKey=${{ steps.publish_vars.outputs.repo }} -PrepoUser=${{ inputs.repoUser }} -PrepoPassword=${{ inputs.repoPassword }} -PenonicRepoUsername=${{ inputs.repoUser }} -PenonicRepoPassword=${{ inputs.repoPassword }}
      shell: bash

    - uses: docker/setup-qemu-action@v3
      if: inputs.dockerhubUsername != '' && inputs.skipPublishing != 'true' && inputs.publishRelease == 'true' && steps.publish_vars.outputs.release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: arm64,amd64

    - uses: docker/setup-buildx-action@v3
      if: inputs.dockerhubUsername != '' && inputs.skipPublishing != 'true' && inputs.publishRelease == 'true' && steps.publish_vars.outputs.release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')

    - uses: docker/login-action@v3
      if: inputs.dockerhubUsername != '' && inputs.skipPublishing != 'true' && inputs.publishRelease == 'true' && steps.publish_vars.outputs.release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
      with:
        username: ${{ inputs.dockerhubUsername }}
        password: ${{ inputs.dockerhubToken }}

    - name: Docker build and push
      uses: docker/build-push-action@v5
      if: inputs.dockerhubUsername != '' && inputs.skipPublishing != 'true' && inputs.publishRelease == 'true' && steps.publish_vars.outputs.release == 'true' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
      with:
        context: .
        pull: true
        no-cache: true
        push: true
        tags: enonic/${{ steps.publish_vars.outputs.projectName }}:${{ steps.publish_vars.outputs.version }}
        platforms: linux/amd64,linux/arm64

    - uses: codecov/codecov-action@v4
      with:
        codecov-token: ${{ inputs.codecovToken }}
